// index.js

const express = require('express');
const line = require('@line/bot-sdk');
const { GoogleSpreadsheet } = require('google-spreadsheet');

// --- ‚öôÔ∏è 1. ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà) ---

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE
const config = {
    channelAccessToken: 'pK1ISEv3EpisSPdg2+LL5GNOWT9jpB9w4Q0CDMfAtp1KCZDM8yGeBvxTf7M6TwT/kTWEJ/3ZyZ5kEqvz8ZezZ2PSAP8cjipmu+n0yH1lxtRWscYYxah2S78+mPvy8yxCgo3B+QwrBLDzXztjvOQDWgdB04t89/1O/w1cDnyilFU=', // <<< ‡πÉ‡∏™‡πà Channel Access Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    channelSecret: 'd108a59f7374d4a13eea586456ca9696'           // <<< ‡πÉ‡∏™‡πà Channel Secret ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
};

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheet
const SPREADSHEET_ID = '1eGTIcbeHfv8X26rTM2HW4qsvHFedYsmIne2XqStbfIE'; // <<< ‡πÉ‡∏™‡πà Spreadsheet ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const creds = require('./credentials.json'); // <<< ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå credentials.json ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
const doc = new GoogleSpreadsheet(SPREADSHEET_ID);

// --- ü§ñ 2. ‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó ---

const client = new line.Client(config);
const app = express();

// Endpoint ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Webhook ‡∏à‡∏≤‡∏Å LINE
app.post('/webhook', line.middleware(config), (req, res) => {
    Promise
        .all(req.body.events.map(handleEvent))
        .then((result) => res.json(result))
        .catch((err) => {
            console.error(err);
            res.status(500).end();
        });
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞ Event
async function handleEvent(event) {
    // Event: ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
    if (event.type === 'follow') {
        try {
            const userId = event.source.userId;
            const profile = await client.getProfile(userId);
            
            const userData = {
                Timestamp: new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }),
                userId: userId,
                displayName: profile.displayName,
                pictureUrl: profile.pictureUrl,
                statusMessage: profile.statusMessage,
                language: profile.language,
            };
            
            console.log('‚úÖ New Follower:', userData.displayName);
            await saveToGoogleSheets('Users', userData); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ä‡∏µ‡∏ó 'Users'
        } catch (error) {
            console.error('Error on follow event:', error);
        }
    }

    // Event: ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if (event.type === 'message' && event.message.type === 'text') {
        try {
            const chatData = {
                Timestamp: new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }),
                userId: event.source.userId,
                message_type: event.message.type,
                message_text: event.message.text,
            };

            console.log('‚úâÔ∏è New Message:', chatData.message_text);
            await saveToGoogleSheets('ChatHistory', chatData); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ä‡∏µ‡∏ó 'ChatHistory'
        } catch (error)
        {
            console.error('Error on message event:', error);
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheet
async function saveToGoogleSheets(sheetTitle, dataRow) {
    try {
        await doc.useServiceAccountAuth(creds);
        await doc.loadInfo(); 

        const sheet = doc.sheetsByTitle[sheetTitle];
        if (sheet) {
            await sheet.addRow(dataRow);
        } else {
            console.error(`Sheet "${sheetTitle}" not found!`);
        }
    } catch (error) {
        console.error('Error saving to Google Sheets:', error);
    }
}

// ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
const port = process.env.PORT || 3000;
app.listen(port, () => {
    console.log(`Server is listening on port ${port}...`);
});